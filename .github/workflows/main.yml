name: CI

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  version:
    runs-on: ubuntu-18.04
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    steps:
    - name: Determine version
      id: version
      run: |
        echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
        echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
        if [[ ${GITHUB_REF#refs/tags/} == refs/heads/* ]]
        then
          echo ::set-output name=VERSION::${GITHUB_SHA}
        else
          echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
        fi


  build-linux:
    needs: [version]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Build CA
      run: docker run -e RELEASE_VERSION=${{ needs.version.outputs.VERSION }} -v $GITHUB_WORKSPACE:/workdir --rm miob/openra-build ./build-docker.sh
    - name: Upload packages
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts-linux
        path: build/
        if-no-files-found: error

  build-macos:
    needs: [version]
    runs-on: macos-11.0
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: make
    - name: Package
      run: |
        mkdir build
        ./packaging/package-all.sh ${{ needs.version.outputs.VERSION }} build
    - name: Upload packages
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts-macos
        path: build/TugOfWar-${{ needs.version.outputs.VERSION }}.dmg
        if-no-files-found: error

  prepare-release:
    needs: [build-linux]
    runs-on: ubuntu-18.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.version.outputs.VERSION }}
        release_name: Release ${{ needs.version.outputs.VERSION }}
        draft: true
        prerelease: false

  release-linux-build:
    needs: [prepare-release]
    runs-on: ubuntu-18.04
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v2
    - name: Upload Release Asset (Linux AppImage)
      id: upload-release-asset-linux-appimage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.prepare-release.outputs.upload_url }}
        asset_path: ./build-artifacts-linux/TugOfWar-${{ needs.version.outputs.VERSION }}-x86_64.AppImage
        asset_name: TugOfWar-${{ needs.version.outputs.VERSION }}-x86_64.AppImage
        asset_content_type: application/octet-stream
    - name: Upload Release Asset (Windows Portable)
      id: upload-release-asset-windows-portable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.prepare-release.outputs.upload_url }}
        asset_path: ./build-artifacts-linux/TugOfWar-${{ needs.version.outputs.VERSION }}-x64-winportable.zip
        asset_name: TugOfWar-${{ needs.version.outputs.VERSION }}-x64-winportable.zip
        asset_content_type: application/zip
    - name: Upload Release Asset (Windows Setup)
      id: upload-release-asset-windows-setup
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.prepare-release.outputs.upload_url }}
        asset_path: ./build-artifacts-linux/TugOfWar-${{ needs.version.outputs.VERSION }}-x64.exe
        asset_name: TugOfWar-${{ needs.version.outputs.VERSION }}-x64.exe
        asset_content_type: application/octet-stream

  release-macos-build:
    needs: [prepare-release, build-macos]
    runs-on: ubuntu-18.04
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v2
    - name: Upload Release Asset (Mac OS)
      id: upload-release-asset-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.prepare-release.outputs.upload_url }}
        asset_path: ./build-artifacts-macos/TugOfWar-${{ needs.version.outputs.VERSION }}.dmg
        asset_name: TugOfWar-${{ needs.version.outputs.VERSION }}.dmg
        asset_content_type: application/octet-stream
